diff --git a/dist/esm/LexicalAutoLinkPlugin.js b/dist/esm/LexicalAutoLinkPlugin.js
index 92ce8a82f6a08759501dbbb4fdf8e71a2fa3c260..271327feea3719cab2497c7045846aea987e3095 100644
--- a/dist/esm/LexicalAutoLinkPlugin.js
+++ b/dist/esm/LexicalAutoLinkPlugin.js
@@ -166,8 +166,10 @@ function useAutoLink(editor, matchersAccessor, onChangeAccessor) {
   createEffect(() => {
     const onChange = onChangeAccessor();
     const matchers = matchersAccessor();
-    if (!editor.hasNodes([AutoLinkNode])) {
-      throw new Error("LexicalAutoLinkPlugin: AutoLinkNode not registered on editor");
+    if (import.meta.env.DEV) {
+      if (!editor.hasNodes([AutoLinkNode])) {
+        throw new Error("LexicalAutoLinkPlugin: AutoLinkNode not registered on editor");
+      }
     }
     const onChangeWrapped = (url, prevUrl) => {
       if (onChange) {
diff --git a/dist/esm/LexicalComposerContext.js b/dist/esm/LexicalComposerContext.js
index 9d6f15aabcc030e059eabf87a5e6bf47b1463ae9..de5063ceb72e4cdda3af89bc28337944054311d9 100644
--- a/dist/esm/LexicalComposerContext.js
+++ b/dist/esm/LexicalComposerContext.js
@@ -18,11 +18,15 @@ function createLexicalComposerContext(parent, theme) {
 const LexicalComposerContext = createContext(null);
 const useLexicalComposerContext = () => {
   const composerContext = useContext(LexicalComposerContext);
-  if (!composerContext) {
-    {
-      throw Error(`useLexicalComposerContext: cannot find a LexicalComposerContext`);
+
+  if (import.meta.env.DEV) {
+    if (!composerContext) {
+      {
+        throw Error(`useLexicalComposerContext: cannot find a LexicalComposerContext`);
+      }
     }
   }
+
   return composerContext;
 };
 
